#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'atlasats'
require './util'



### Place a limit order that stays open ###



# See helper class 'Util' in util.rb
client = Util.logon

## Sending a limit order
# Parameters:
# - asset (examples: "BTC", "LTC Call 700 Apr 2014")
# - currency ("USD")
# - action ("BUY" or "SELL")
# - quantity 
# - price
returnValue = client.place_limit_order "BTC", "USD", "BUY", 0.1, 1

## The return value of the call to 'place_limit_order' is a hash containing fields: account, action, oid, item_id, 
# quantity, limit, side, time, market, status, item, currency
# All but the following are self-explanatory:
# - oid: a unique order ID generated by the server to identify the order just placed
# - item_id: a unique asset identifier (example 'BTC' has item_id '0')
# - market: a unique identifier for the asset class (0: coins, 1: options)
# - status: order status will be one of ('PENDING', 'OPEN', 'REJECTED', 'DONE')
puts returnValue

# Store order ID in a variable
oid = returnValue["oid"]

## Retrieve and check order status
# (we use a counter 'i' to prevent endless loops, just in case the connection to server is down)
i = 0
status = returnValue["status"]
while status == 'PENDING' && i < 1000
	i += 1
	sleep 0.1
	info = client.order_info oid
	status = info["status"]
end

# Print out status
puts 'order ' + oid + ' is: ' + status
